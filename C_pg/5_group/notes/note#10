*선택 정렬 
선택 정렬은 정렬되지 않은 리스트에서 가장 작은 원소를 찾고 
찾은 원소를 제외한 정렬되지 않은 리스트의 첫 번째 원소와 자리를 바꾼다
그리고 정렬되지 않은 리스트에서 가장 작은 값을 벽 앞에 정렬된 리스트로 넘긴다 
이런 방식을 정렬된 리스트가 모두 다 정렬 될 때 까지 실행한다 

코드는 생각보다 어려웠는데 최소값 원소를 찾는 코드는 
쉬웠지만 정렬되지 않은 리스트에서 가장 작은 값을 정렬된 리스트로 넘기는 코드가 
생각보다 어려웠지만 해결하고 디버깅을 활용하여서 확실하게 이해를 했다

*버블 정렬 과정

버블정렬은 가장 원리도 쉬웠고 코드 구현도 쉬웠다.
정렬 되지 않은 리스트를 모두 다 비교하여서 가장 작은 값이 나오면 맨 앞으로 보내는 정렬 방식인데
이 전에 과제에서도 버블정렬이 나와서 그 때에 기억을 살려서 
쉽게 코드를 구현했다 

*삽입 정렬  

삽입 정렬에 알고리즘 개념은 자료 배열의 모든 요소를 앞에서부터 차례대로
이미 정렬된 배열 부분과 비교하여서 자신이 들어갈 위치를 찾아서 삽입하여서 정렬을 완성하는
알고리즘으로 개념은 쉬워보였지만 
코드로 구현하는데는 크게 어려웠다. 오랜기간 생각을 했는데도 알고리즘을 코드로 구현하지 못해서
자료에 나온 코드를 카피해서 디버깅을 하며 코드에 진행을 살폈다 .
그랬더니 조금은 코드가 이해는 갔다 .

*셸 정렬
셸 정렬은 삽입 정렬 알고리즘을 개선한 방법인데 
간격을 설정하여서 간격만큼 떨어진 원소를 모은 부분집합에서 삽입 정렬을 수행함으로써
다음에 간격을 재설정해서 반복하는 과정인데 
기존에 비교하는 원소들이 멀리 떨어져있으면 삽입정렬 시간이 오래 걸린다는 단점을 보완한
알고리즘이라고 할 수 있다 .

코드구현은 삽입정렬과 마찬가지로 많이 어려웠다.


*퀵 정렬 

현재 가장 많이 사용되고 가장 빠른 알고리즘이라고 할 수 있다 
원소에 중간값인 피벗을 고르고 나눠서 큰 값과 작은 값으로 나눠 각각 정렬하는 방법이다 

코드구현은 역시 어려웠지만 카피해서 디버깅을 하면서 천천히 이해했다 
