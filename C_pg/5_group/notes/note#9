C프로그래밍 13주차 정리노트

*파일 입출력
기본적으로 파일에 데이터를 입출력하려면 파일을 열고(open), 처리하고(write, read), 닫으면(close) 된다.
파일과 관련된 함수는 헤더파일인 stdio.h 파일에 들어 있다.

*파일 입출력 함수
-열기 닫기
열기: fopen( )
사용 예시)
FILE *fp;
fp =fopen("input.txt", "r");
input.txt = 파일명, r = 파일모드(쓰기(r) 혹은 읽기(w)를 결정) , 반환형: FILE 포인터
							
닫기: fclose( )
사용 예시)
FILE *fp;
...
fclose(fp);
파일을 성공적으로 닫으면 0을, 그렇지 않다면 EOF를 반환하고 파일을 닫으면 파일 입출력에 사용했던 메모리 공간을 비운다.

****페어 활동****
Q. fclose를 꼭 사용해야 한다고 하셨는데 그 이유는 무엇일까?
fclose를 통해서 꼭 파일을 닫아주어야 한다고 교수님께서 말씀하셨는데 그 이유는 무엇일까에 대해서 서로 얘기해 보았다.
fclose를 사용하는 이유는 만약 fclose를 사용하지 않아서 파일을 닫지 않게 되면 프로그램을 종료한다고 해도 그 파일의
삭제나 이름을 변경하는 곳에서 문제가 생기거나 또는 파일의 이동이 잘 되지 않는 경우가 생길 수 있어서 fclose를 꼭 사용해야
하는 것 같다고 얘기가 나오게 되었다. 
또 다른 얘기로는 메모리 속에 그 파일에 대한 정보가 계속 남아있게 되어 메모리를 불필요하게 계속 차지를 할 수도 있다는 
얘기가 나왔다.
그래서 서로 얘기를 해본 결과 위의 결과들 때문에 파일을 열었으면 꼭 fclose를 사용해서 파일을 닫아줘야 될 것 같다고 결론을 지었다.
********************

-문자 입출력
fgetc( )
사용 예시)
FILE *fp;
char ch;
ch = fgetc(fp);
fp = FILE포인터, 반환형: 파일에서 읽어온 문자가 저장되는 문자형

fputc( )
사용 예시)
FILE *fp
char ch = 'a';
fputc(ch, fp);
ch = 파일에 기록할 문자, fp = FILE 포인터

-행 입출력
fgets( )
사용 예시)
FILE *fp;
...
char line[50];
fgets(line, 50, fp);
line=파일에서 읽어올 문자열이 저장된 배열을 가르키는 포인터, 50=읽어올 문자열의 크기, fp=FILE 포인터

fputs( )
사용 예시)
FILE *fp;
...
char line[50] = "title";
fputs(line, fp);
line = 파일에 저장할 문자 배열을 가르키는 포인터, fp= FILE 포인터

-블록 입출력
fread( ), fwrite( )
함수 형식)
함수명(void* 포인터, 바이트 크기, 블록 수, FILE* 포인터);

-형식화된 입출력
fprintf( )
함수 형식)
fprintf(FILE* 포인터, 변환기호, 변수 목록);
FILE* 포인터= FILE 포인터, 변환기호= printf() 함수에서 사용한 변환기호, 변수목록= 파일에 저장할 내용을 담고 있는 변수들

fscanf( )
함수 형식)
fscanf(FILE* 포인터, 변환기호, 변수 목록);
FILE* 포인터= FILE 포인터, 변환기호= scantf() 함수에서 사용한 변환기호, 변수목록= 파일에서 읽어온 자료가 저장될 변수 또는 변수의 주소

*파일 임의 접근
-순차 접근
파일의 처음이나 끝부처 데이터를 입출력하는 방식이다.

-임의 접근
임의의 위치에서부터 데이터를 입출력하는 방식이고 파일 위치 지시자를 이용하여 파일에 접근한다.

*매크로 
프로그래밍할 때 반복적으로 나타나는 상수나 함수를 명령 하나로 새롭게 정의하는 것을 말한다.
